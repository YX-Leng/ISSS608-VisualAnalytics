{
  "hash": "83f0dff20b654f9ba6dfc66a0c6234a8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 1\"\nauthor: \"Leng Yi Xiu\"\ndate: \"Feb 01 2025\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# Ship Performance in the Gulf of Guinea\n\n## 1 Overview\n\nThe Gulf of Guinea is a crucial maritime hub, but ship performance is affected by environmental conditions, security risks, and regulatory factors. Strong currents, high humidity, and piracy also impact navigation, fuel efficiency, and operational costs.\n\nKey metrics such as vessel speed, fuel consumption, turnaround time, and security-related delays play a crucial role in determining shipping efficiency. Analyzing these factors is essential for optimizing operations and enhancing maritime security in the region.\n\n### 1.1 The Task\n\nFor this week's article, we will be using various data visualisation techniques to explore the different factors affecting ship performance in the Gulf of Guinea.\n\n### 1.2 The Dataset\n\nThe ship performance dataset ([**Kaggle**](https://www.kaggle.com/datasets/jeleeladekunlefijabi/ship-performance-clustering-dataset)) contains data on essential operational metrics and characteristics of different ship types operating in the Gulf of Guinea.\n\nThe raw dataset consists of **2736 rows** and **24 columns**, with some of the key features below:\n\n::: callout-tip\n## Numerical Features\n\n-   **Speed_Over_Ground_knots**: Average speed of the ship over water (in knots).\n\n-   **Engine_Power_kW**: Engine power output (in kilowatts).\n\n-   **Distance_Traveled_nm**: Total distance traveled by the ship (in nautical miles).\n\n-   **Operational_Cost_USD**: Total operational cost per voyage (in USD).\n\n-   **Revenue_per_Voyage_USD**: Revenue generated per voyage (in USD).\n\n-   **Efficiency_nm_per_kWh**: Energy efficiency calculated in nautical miles per kilowatt-hour.\n:::\n\n::: callout-tip\n## Categorical Features\n\n-   **Ship_Type**: Type of ship (e.g., Tanker, Container Ship, Fish Carrier, Bulk Carrier).\n\n-   **Route_Type**: Shipping route type (e.g., Short-haul, Long-haul, Transoceanic).\n\n-   **Engine_Type**: Type of engine (e.g., Diesel, Heavy Fuel Oil).\n\n-   **Maintenance_Status**: Maintenance condition of the ship (e.g., Fair, Critical, Good).\n\n-   **Weather_Condition**: Prevailing weather conditions during voyages (e.g., Calm, Moderate, Rough).\n:::\n\n## 2 Loading R packages and data\n\n### 2.1 Loading R packages\n\nThe following code chunk is used to install necessary packages for this article:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, ggrepel, patchwork, \n               ggthemes, hrbrthemes,ggiraph, \n               gganimate, plotly, DT,\n               readxl, gifski, gapminder)\n```\n:::\n\n\n### 2.2 Import Data\n\nImporting csv data file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nship_data <- read_csv(\"data/Ship_Performance_Dataset.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 2736 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): Ship_Type, Route_Type, Engine_Type, Maintenance_Status, Weather_C...\ndbl  (12): Speed_Over_Ground_knots, Engine_Power_kW, Distance_Traveled_nm, D...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n## 3 Data Preparation\n\nBefore conducting exploratory data analysis, we must first gain a deeper understanding of the dataset and perform essential data preparation steps, including:\n\n1.  Verifying all data types,\n\n2.  Identifying duplicate records, and\n\n3.  Checking for missing values.\n\n### 3.1 Verify Data Types\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(ship_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,736\nColumns: 18\n$ Date                    <date> 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               <chr> \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              <chr> \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             <chr> \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      <chr> \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots <dbl> 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         <dbl> 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    <dbl> 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Draft_meters            <dbl> 14.132284, 14.653083, 7.199261, 11.789063, 9.7…\n$ Weather_Condition       <chr> \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Cargo_Weight_tons       <dbl> 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Operational_Cost_USD    <dbl> 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  <dbl> 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Turnaround_Time_hours   <dbl> 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n$ Efficiency_nm_per_kWh   <dbl> 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Seasonal_Impact_Score   <dbl> 1.4156533, 0.8856478, 1.4058132, 1.3707043, 0.…\n$ Weekly_Voyage_Count     <dbl> 1, 6, 9, 1, 8, 7, 3, 6, 8, 2, 9, 4, 3, 7, 7, 3…\n$ Average_Load_Percentage <dbl> 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncategorical_cols <- ship_data %>%\n  select(where(is.character))\n\n# Show unique values for each categorical column\nunique_vals <- categorical_cols %>%\n  summarise(across(everything(), ~ list(unique(.))))\n\nprint(unique_vals)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n  Ship_Type Route_Type Engine_Type Maintenance_Status Weather_Condition\n  <list>    <list>     <list>      <list>             <list>           \n1 <chr [5]> <chr [5]>  <chr [4]>   <chr [4]>          <chr [4]>        \n```\n\n\n:::\n:::\n\n\n### 3.2 Identify duplicate records\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- ship_data %>% \n  group_by_all() %>% \n  filter(n()>1) %>% \n  ungroup()\n  \nduplicate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 18\n# ℹ 18 variables: Date <date>, Ship_Type <chr>, Route_Type <chr>,\n#   Engine_Type <chr>, Maintenance_Status <chr>, Speed_Over_Ground_knots <dbl>,\n#   Engine_Power_kW <dbl>, Distance_Traveled_nm <dbl>, Draft_meters <dbl>,\n#   Weather_Condition <chr>, Cargo_Weight_tons <dbl>,\n#   Operational_Cost_USD <dbl>, Revenue_per_Voyage_USD <dbl>,\n#   Turnaround_Time_hours <dbl>, Efficiency_nm_per_kWh <dbl>,\n#   Seasonal_Impact_Score <dbl>, Weekly_Voyage_Count <dbl>, …\n```\n\n\n:::\n:::\n\n\n### 3.3 Check for missing values\n\n\n::: {.cell}\n\n:::\n\n\n## 4 Exploratory Data Analysis\n\n### 4.1\n\n### 4.2\n\n### 4.3\n\n### 4.4\n\n### 4.5\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}