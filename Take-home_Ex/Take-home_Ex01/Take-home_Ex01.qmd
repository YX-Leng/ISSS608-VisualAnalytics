---
title: "Take-Home Exercise 1: Ship Performance in the Gulf of Guinea"
author: "Leng Yi Xiu"
date: "Feb 01 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
  format: html
  css: styles.css
---

## 1 Overview

The Gulf of Guinea is a crucial maritime hub, but ship performance is affected by environmental conditions, security risks, and regulatory factors. Strong currents, high humidity, and piracy also impact navigation, fuel efficiency, and operational costs.

Key metrics such as vessel speed, fuel consumption, turnaround time, and security-related delays play a crucial role in determining shipping efficiency. Analyzing these factors is essential for optimizing operations and enhancing maritime security in the region.

### 1.1 The Task

For this week's article, we will be using various data visualisation techniques to explore the different factors affecting ship performance in the Gulf of Guinea.

### 1.2 The Dataset

The ship performance dataset ([**Kaggle**](https://www.kaggle.com/datasets/jeleeladekunlefijabi/ship-performance-clustering-dataset)) contains data on essential operational metrics and characteristics of different ship types operating in the Gulf of Guinea.

The raw dataset consists of **2,736 rows** and **18 columns**, with some of the key features below:

::: callout-tip
## Numerical Features

-   **Speed_Over_Ground_knots**: Average speed of the ship over water (in knots).

-   **Engine_Power_kW**: Engine power output (in kilowatts).

-   **Distance_Traveled_nm**: Total distance traveled by the ship (in nautical miles).

-   **Operational_Cost_USD**: Total operational cost per voyage (in USD).

-   **Revenue_per_Voyage_USD**: Revenue generated per voyage (in USD).

-   **Efficiency_nm_per_kWh**: Energy efficiency calculated in nautical miles per kilowatt-hour.
:::

::: callout-tip
## Categorical Features

-   **Ship_Type**: Type of ship (e.g., Tanker, Container Ship, Fish Carrier, Bulk Carrier).

-   **Route_Type**: Shipping route type (e.g., Short-haul, Long-haul, Transoceanic).

-   **Engine_Type**: Type of engine (e.g., Diesel, Heavy Fuel Oil).

-   **Maintenance_Status**: Maintenance condition of the ship (e.g., Fair, Critical, Good).

-   **Weather_Condition**: Prevailing weather conditions during voyages (e.g., Calm, Moderate, Rough).
:::

## 2 Loading R packages and data

### 2.1 Loading R packages

ðŸ“Œ The following code chunk is used to install necessary packages for this article:

```{r}
pacman::p_load(dplyr, tidyverse, ggdist, lubridate, 
               ggthemes, colorspace, ggiraph, 
               ggtext, gganimate, plotly, readxl, 
               gifski, gapminder, factoextra, cluster)
```

### 2.2 Import Data

ðŸ“Œ Importing the csv data file and mutating categorical data to factors:

```{r}
cols <- c("Ship_Type", "Route_Type", "Engine_Type","Maintenance_Status","Weather_Condition")
ship_data <- read_csv("data/Ship_Performance_Dataset.csv") %>%
  mutate(across(cols, as.factor))
```

## 3 Data Preparation

Before conducting exploratory data analysis, we must first gain a deeper understanding of the dataset and perform essential data preparation steps, including:

1.  Verifying all data types,

2.  Identifying duplicate records, and

3.  Checking for missing values.

### 3.1 Verify Data Types

ðŸ“Œ Code chunk to verify that all data types in the dataset is correct:

```{r}
#| code-fold: true
glimpse(ship_data)
```

ðŸ“Œ To further understand the categorical features and values used for each feature, the following code chunk is used to list out the unique values for each categorical column:

```{r}
#| code-fold: true
categorical_cols <- ship_data %>%
  select(where(~is.factor(.)))

# Show unique values for each categorical column
unique_vals <- categorical_cols %>%
  map(~ unique(.))

print(unique_vals)
```

::: callout-caution
## To Note

As observed, all the categorical columns have unique value stated as "None" which can be interpreted as a missing value in the data.

This will need to be addressed in **3.3 Check for missing values**.
:::

### 3.2 Identify duplicate records

```{r}
#| code-fold: true
duplicate <- ship_data %>% 
  group_by_all() %>% 
  filter(n()>1) %>% 
  ungroup()
  
duplicate
```

::: callout-note
## Note

-   No duplicate records identified.
:::

### 3.3 Check for missing values

```{r}
#| code-fold: true
missing_data <- is.na(ship_data)

# Filter rows where there is at least one TRUE (missing value)
missing_row <- ship_data[apply(missing_data, 1, any), ]
print(missing_row)
```

::: callout-note
## Note

-   No missing values identified.

-   However, data wrangling required to exclude categorical features that have "None" indicated. Following code chunks are used to identify records that have "None" indicated in any one of the categorical features and to filter them out from the clean dataset for analysis.
:::

```{r}
#| code-fold: true
none_vals <- ship_data %>%
  filter(if_any(where(is.factor), ~ . == "None"))

print(none_vals)
```

```{r}
#| code-fold: true
ship_data_clean <- ship_data %>%
  filter(!if_any(where(is.factor), ~ . == "None"))

glimpse(ship_data_clean)
```

::: callout-important
## Observations

After cleaning up the data and excluding records where categorical data has "None" indicated, the clean dataset consists of **2,127 rows** and **18 columns.**

With this, we can proceed to our Exploratory Data Analysis (EDA).
:::

## 4 Exploratory Data Analysis (EDA)

### 4.1 Univariate: Frequency Counts for all features

For EDA, we firstly run a distribution analysis across all the categorical and numerical features to understand the representation of each feature.

-   Use of `geom_bar()` and `geom_histogram()` to look at the distribution of data across all categorical features.
-   Use of `facet_wrap()` to view multiple plots in a grid - particularly useful for visualizing how a certain feature behaves across different subsets of the data.

::: panel-tabset
## Categorical Features

```{r}
#| code-fold: true
# Select categorical columns
cat_cols <- c("Ship_Type", "Route_Type", "Engine_Type", "Maintenance_Status", "Weather_Condition")

# Pivot data to long format
ship_data_categorical <- ship_data_clean %>%
  select(all_of(cat_cols)) %>%
  pivot_longer(cols = everything(), names_to = "variable", values_to = "category")

# Plot faceted bar charts
ggplot(ship_data_categorical, aes(x = category, fill = variable)) +
  geom_bar(color = "black") +
  geom_text(stat = "count", aes(label = after_stat(count)), hjust = -0.2, size = 2.5) +
  coord_flip(clip = "off", expand = FALSE) +
  facet_wrap(~variable, scales = "free_y") +  
  theme_minimal(base_size = 10) +
  scale_fill_brewer(palette = "Set3") +
  labs(title = "Distribution of Categorical Features",
       x = "Category",
       y = "Count") +
  theme(legend.position = "none",
    plot.title = element_text(face = "bold", hjust = 0.5, size = 10))
```

## Numeric Features

```{r}
#| code-fold: true
# Pivot data to long format
ship_data_numeric <- ship_data_clean %>%
  pivot_longer(cols = where(is.numeric), 
               names_to = "Feature", 
               values_to = "Numeric")

# Plot faceted histograms
ggplot(ship_data_numeric, aes(x = Numeric, fill = Feature)) +
  geom_histogram(color = "black", bins = 30, alpha = 0.7) +  
  facet_wrap(~Feature, scales = "free") +  
  theme_minimal(base_size = 10) +
  scale_fill_brewer(palette = "Set3") +
  labs(title = "Distribution of Numeric Features",
       x = "Value",
       y = "Frequency") +
  theme(legend.position = "none",
        strip.text = element_text(size = 10),
        plot.title = element_text(face = "bold", size = 10, hjust = 0.5),
        plot.margin = margin(10, 10, 10, 10))  
```
:::

::: callout-important
## Observations

-   Data observed is generally **evenly distributed**. Each categorical and numerical feature is evenly represented.
-   Generally no significant outliers observed from the dataset.
:::

### 4.2 Visualizing Correlation Matrix of Numeric Features

Next, we move on to understanding relationships between the numeric features in the dataset. This is to identify if any of the features influence one another.

To understand this, we will make use of a correlation matrix to measure the strength of the relationship between two features. This is visualized using `ggcormat()` of the **ggstatsplot** package.

```{r}
#| code-fold: true
scaled_cols <- scale(ship_data_clean[, c(6:9, 11:18)])
scaled_cols <- as.data.frame(scaled_cols)
ship_data_scale <- cbind(ship_data_clean[, -c(6:9, 11:18)], scaled_cols)
ship_data_scale <- as.data.frame(ship_data_scale)
```

```{r}
#| code-fold: true
ggstatsplot::ggcorrmat(
  data = ship_data_scale, 
  cor.vars = c(6:9, 11:18),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlation Matrix for Ship Performance",
  subtitle = "All pairs: no significant at p < 0.05"
)
```

::: callout-important
## Observations

-   Features do not have strong linear relationships with each other.

-   None of the correlations between these features are statistically significant at the p \< 0.05 level, possibly due to over-scaling / normalization of the data.

-   Other types of non-linear relationships (i.e. clustering) should be considered.
:::

### 4.3 Bivariate: Factors affecting Numeric Features

::: panel-tabset
## Ship Type

```{r}
#| code-fold: true
# Boxplot with facets
ggplot(data = ship_data_numeric, 
       aes(y = Numeric, x = Ship_Type)) +  # x maps to Ship_Type
  geom_boxplot(outlier.shape = 16,  
               outlier.colour = "blue",  
               outlier.size = 1) +       
  geom_point(stat="summary",        
             fun="mean",           
             colour="pink",          
             size=3) +
  labs(title = "Box Plots of All Numeric Features by Ship Type") +
  facet_wrap(~Feature, scales = "free_y") +
   theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  
    strip.text = element_text(size = 8, lineheight = 1.1),
    plot.margin = margin(10, 10, 10, 10),  
    panel.spacing = unit(0.5, "lines")  
   )
```

## Route Type

```{r}
#| code-fold: true
# Boxplot with facets
ggplot(data = ship_data_numeric, 
       aes(y = Numeric, x = Route_Type)) +  # x maps to Route Type
  geom_boxplot(outlier.shape = 16,  
               outlier.colour = "blue",  
               outlier.size = 1) +       
  geom_point(stat="summary",        
             fun="mean",           
             colour="pink",          
             size=3) +
  labs(title = "Box Plots of All Numeric Features by Route Type") +
  facet_wrap(~Feature, scales = "free_y") +
   theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  
    strip.text = element_text(size = 8, lineheight = 1.1),
    plot.margin = margin(10, 10, 10, 10),  
    panel.spacing = unit(0.5, "lines")  
   )
```

## Engine Type

```{r}
#| code-fold: true
# Boxplot with facets
ggplot(data = ship_data_numeric, 
       aes(y = Numeric, x = Engine_Type)) +  # x maps to Engine_Type
  geom_boxplot(outlier.shape = 16,  
               outlier.colour = "blue",  
               outlier.size = 1) +       
  geom_point(stat="summary",        
             fun="mean",           
             colour="pink",          
             size=3) +
  labs(title = "Box Plots of All Numeric Features by Engine Type") +
  facet_wrap(~Feature, scales = "free_y") +
   theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  
    strip.text = element_text(size = 8, lineheight = 1.1),
    plot.margin = margin(10, 10, 10, 10),  
    panel.spacing = unit(0.5, "lines")  
   )
```

## Maintenance Status

```{r}
#| code-fold: true
# Boxplot with facets
ggplot(data = ship_data_numeric, 
       aes(y = Numeric, x = Maintenance_Status)) +  # x maps to Maintenance Status
  geom_boxplot(outlier.shape = 16,  
               outlier.colour = "blue",  
               outlier.size = 1) +       
  geom_point(stat="summary",        
             fun="mean",           
             colour="pink",          
             size=3) +
  labs(title = "Box Plots of All Numeric Features by Maintenance Status") +
  facet_wrap(~Feature, scales = "free_y") +
   theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  
    strip.text = element_text(size = 8, lineheight = 1.1),
    plot.margin = margin(10, 10, 10, 10),  
    panel.spacing = unit(0.5, "lines")  
   )
```

## Weather Conditions

```{r}
#| code-fold: true
# Boxplot with facets
ggplot(data = ship_data_numeric, 
       aes(y = Numeric, x = Weather_Condition)) +  # x maps to Weather Conditions
  geom_boxplot(outlier.shape = 16,  
               outlier.colour = "blue",  
               outlier.size = 1) +       
  geom_point(stat="summary",        
             fun="mean",           
             colour="pink",          
             size=3) +
  labs(title = "Box Plots of All Numeric Features by Weather Conditions") +
  facet_wrap(~Feature, scales = "free_y") +
   theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  
    strip.text = element_text(size = 8, lineheight = 1.1),
    plot.margin = margin(10, 10, 10, 10),  
    panel.spacing = unit(0.5, "lines")  
   )
```
:::

::: callout-important
## Observations

-   Looking at the box plots for all 5 categorical features, the influence of categorical features on the numerical features (i.e. revenue, cost, turnaround time etc.) is minimal.

-   There are no significant trends identified from the plots that compares averages across the categorical features.

-   Next, we will try to identify if there is any time trends on key numerical features (i.e. revenue, cost and fuel efficiency).
:::

### 4.4 Time Trend of Fuel Efficiency, Average Revenue and Average Cost

::: panel-tabset
## Fuel Efficiency

```{r}
#| code-fold: true
# Extract Year-Month
ship_data_Timetrend <- ship_data_clean %>%
  mutate(Year_Month = as.Date(format(Date, "%Y-%m-01"))) %>%
  group_by(Year_Month, Engine_Type) %>%
  summarise(Average_Efficiency = mean(Efficiency_nm_per_kWh, na.rm = TRUE), .groups = "drop")

# Average Efficiency over time
plot_efficiency <-plot_ly(data = ship_data_Timetrend, 
        x = ~Year_Month, 
        y = ~Average_Efficiency, 
        color = ~Engine_Type, 
        type = 'scatter', 
        mode = 'lines+markers')

# Apply layout for the Efficiency plot
plot_efficiency <- plot_efficiency %>%
 layout(title = "Fuel Efficiency Over Time",
         font = list(size = 16, family = "Arial"),
         xaxis = list(title = "Year-Month", titlefont = list(size = 14, family = "Arial")),
         yaxis = list(title = "Efficiency (nm / kWh)", titlefont = list(size = 14, family = "Arial")),
         plot_bgcolor = "#f9f9f9",   # Background color
         paper_bgcolor = "#ffffff",  # Paper background color
         font = list(family = "Arial", size = 14, color = "#333333"),  # General font style
         showlegend = TRUE, 
         legend = list(title = list(text = 'Engine Type')),
         margin = list(l = 60, r = 60, t = 60, b = 60),  # Adjust margins
         hovermode = "closest",   # Improve hover interaction
         hoverlabel = list(bgcolor = "white", font = list(color = "black")))  # Hover label styling
plot_efficiency
```

::: callout-important
## Observations

-   Seasonal trend is observed, especially for **Long-haul** and **Short-haul** routes.

    -   **Long-haul**: Average revenue peaked in the months of August and March

    -   **Short-haul**: Average revenue peaked in the month of January

-   However, this showed be analysed in tandem with the seasonal trend for operational cost and profit can be maximized only if operational costs are kept low.
:::

## Average Revenue

```{r}
#| code-fold: true
# Extract Year-Month
ship_data_Timetrend1 <- ship_data_clean %>%
  mutate(Year_Month = as.Date(format(Date, "%Y-%m-01"))) %>%
  group_by(Year_Month, Route_Type) %>%
  summarise(Average_Revenue = mean(Revenue_per_Voyage_USD, na.rm = TRUE),
            Average_Cost = mean(Operational_Cost_USD, na.rm = TRUE),.groups = "drop")

# Average Revenue over time
plot_revenue <- plot_ly(data = ship_data_Timetrend1, 
        x = ~Year_Month, 
        y = ~Average_Revenue, 
        color = ~Route_Type, 
        type = 'scatter', 
        mode = 'lines+markers')

# Apply layout for the revenue plot
plot_revenue <- plot_revenue %>%
 layout(title = "Average Revenue Over Time",
         font = list(size = 16, family = "Arial"),
         xaxis = list(title = "Year-Month", titlefont = list(size = 14, family = "Arial")),
         yaxis = list(title = "Average Revenue (USD)", titlefont = list(size = 14, family = "Arial")),
         plot_bgcolor = "#f9f9f9",   # Background color
         paper_bgcolor = "#ffffff",  # Paper background color
         font = list(family = "Arial", size = 14, color = "#333333"),  # General font style
         showlegend = TRUE, 
         legend = list(title = list(text = 'Route Type')),
         margin = list(l = 60, r = 60, t = 60, b = 60),  # Adjust margins
         hovermode = "closest",   # Improve hover interaction
         hoverlabel = list(bgcolor = "white", font = list(color = "black")))  # Hover label styling
plot_revenue
```

::: callout-important
## Observations

-   Seasonal trend is observed, especially for **Long-haul** and **Short-haul** routes:

    -   **Long-haul**: Average revenue peaked in the months of August and March

    -   **Short-haul**: Average revenue peaked in the month of January

-   However, this showed be analysed in tandem with the seasonal trend for operational cost and profit can be maximized only if operational costs are kept low.
:::

## Average Cost

```{r}
#| code-fold: true
# Average Cost over time
plot_cost <- plot_ly(data = ship_data_Timetrend1, 
        x = ~Year_Month, 
        y = ~Average_Cost, 
        color = ~Route_Type, 
        type = 'scatter', 
        mode = 'lines+markers')

# Apply layout for the cost plot
plot_cost <- plot_cost %>%
 layout(title = "Average Cost Over Time",
         font = list(size = 16, family = "Arial"),
         xaxis = list(title = "Year-Month", titlefont = list(size = 14, family = "Arial")),
         yaxis = list(title = "Average Cost (USD)", titlefont = list(size = 14, family = "Arial")),
         plot_bgcolor = "#f9f9f9",   # Background color
         paper_bgcolor = "#ffffff",  # Paper background color
         font = list(family = "Arial", size = 14, color = "#333333"),  # General font style
         showlegend = TRUE, 
         legend = list(title = list(text = 'Route Type')),
         margin = list(l = 60, r = 60, t = 60, b = 60),  # Adjust margins
         hovermode = "closest",   # Improve hover interaction
         hoverlabel = list(bgcolor = "white", font = list(color = "black")))  # Hover label styling
plot_cost
```

::: callout-important
## Observations

-   Seasonal trend is also observed, but it differs slightly from the trend in revenue:

    -   **Long-haul**: Average cost peaked in the months of **October** and March. Cost in August is kept relatively low, even though revenues were high, possibly due to other factors like use of more fuel efficient ships to keep cost down.

    -   **Short-haul & Transoceanic**: Average cost generally higher among the 4 route types and have erratic trends. Not recommended as they do not maximize profits.
:::
:::

### 4.5 K-Means

```{r}
fviz_nbclust(scaled_cols, kmeans, method = "wss") + 
  ggtitle("Elbow Method for Choosing k")
```

```{r}
# Assuming you choose the optimal k (let's say k = 3)
optimal_k <- 2
kmeans_result <- kmeans(scaled_cols, centers = optimal_k, nstart = 25)

fviz_cluster(kmeans_result, data = scaled_cols, 
             ellipse.type = "norm", geom = "point", 
             main = paste("K-Means Clustering (k =", optimal_k, ")"))
```

```{r}
# Calculate silhouette score
silhouette_scores <- silhouette(kmeans_result$cluster, dist(scaled_cols))
avg_silhouette_score <- mean(silhouette_scores[, 3])

# Print the silhouette object
print(avg_silhouette_score)
```

## 5 Summary & Conclusion
