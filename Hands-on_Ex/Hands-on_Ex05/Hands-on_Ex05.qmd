---
title: "Hands-on Exercise 5"
author: "Leng Yi Xiu"
date: "Feb 08 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

## 1 Creating Ternary Plot with R

### 1.1 Overview

Ternary plots are a way of displaying the distribution and variability of **three-part compositional data**. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.

### 1.2 Loading R Packages

-   [**ggtern**](http://www.ggtern.com/), a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.

-   [**Plotly R**](https://plot.ly/r/), an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The **plotly R** libary contains the *ggplotly* function, which will convert **ggplot2** figures into a Plotly object.

```{r}
pacman::p_load(plotly, ggtern, tidyverse)
```

### 1.3 Import Data & Data Preparation

Import Data:

```{r}
#Reading the data into R environment
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

Preparing the data to derive 3 new measures:

```{r}
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

### 1.4 Plotting Ternary Diagram with R

#### 1.4.1 Plotting a static ternary diagram

```{r}
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()
```

To add labels and theme:

```{r}
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2015") +
  theme_rgbw()
```

#### 1.4.2 Plotting an interactive ternary diagram using plot_ly()

```{r}
# reusable function for creating annotation object
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```

## 2 Visual Correlation Analysis

### 2.1 Overview

Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0.

A correlation coefficient of 1 shows a **perfect linear relationship** between the two variables, while a -1.0 shows a **perfect inverse relationship** between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.

3 reasons for computing a correlation matrix:

-   To reveal the relationship between high-dimensional variables pair-wisely

-   To input into other analyses, e.g. people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.

-   As a diagnostic when checking other analyses.

::: {.callout-tip appearance="simple"}
[**Corrgram**](http://www.datavis.ca/papers/corrgram.pdf) tend to be used to visually explore and analyse the structure and the patterns of relations among variables. 

It is designed based on two main schemes:

-   Rendering the value of a correlation to depict its sign and magnitude, and

-   Reordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.
:::

### 2.2 Loading R Packages

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse)
```

### 2.3 Import Data & Data Preparation

The Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of **13 variables** and 6497 observations.

```{r}
wine <- read_csv("data/wine_quality.csv")
```

```{r}
summary(wine)
```

### 2.4 Building Correlation Matrix: `pairs()` method

#### 2.4.1 Building a basic correlation matrix

```{r}
pairs(wine[,1:11])
```

::: {.callout-note appearance="simple"}
Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.
:::

```{r}
pairs(wine[,2:12])
```

#### 2.4.2 Drawing the lower corner

::: {.callout-tip appearance="simple"}
It is a common practice to show either the upper half or lower half of the correlation matrix instead of both because a correlation matrix is symmetric.

-   Use upper.panel or lower.panel argument
:::

```{r}
pairs(wine[,2:12], upper.panel = NULL)
```

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

#### 2.4.3 including with correlation coefficients

```{r}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```

### 2.5 Visualising Correlation Matrix: `ggcormat()`

::: {.callout-caution appearance="simple"}
One of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations).

-   **Corrgram** data visualisation technique can be used to overcome this problem
:::

#### 2.5.1 The basic plot

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05")


# Used to control specific components of the plot
ggplot.component = list(
    theme(text=element_text(size=5),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 8)))
```

### 2.6 Building multiple plots

```{r}
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)
```

### 2.7 Visualising Correlation Matrix using corrplot Package

#### 2.7.1 Getting started with corrplot

```{r}
wine.cor <- cor(wine[, 1:11])
```

```{r}
corrplot(wine.cor)
```

::: {.callout-note appearance="simple"}
The default visual object used to plot the corrgram is **circle**.

The default layout of the corrgram is a **symmetric matrix**.

The default colour scheme is **diverging blue-red**, blue = pair variables with +ve correlation coefficients, red = pair variables with -ve correlation coefficients

Intensity of colour (or **saturation**) is used to represent the strength of the correlation coefficient, i.e. darker colours = stronger linear relationship
:::

#### 2.7.2 Working with visual geometrics

In **corrplot** package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. Default visual = circle.

To change the default setting:

```{r}
corrplot(wine.cor, 
         method = "ellipse") 
```

#### 2.7.3 Working with layout

`corrplor()` supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. 

To change the default setting:

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower")
```

To further customize the default layout:

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower",
         diag = FALSE,
         tl.col = "black")
```

#### 2.7.4 Working with mixed layout

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

#### 2.7.5 Combining corrgram with the significant test

Figure below shows a corrgram combined with the significant test. The corrgram reveals that **not all correlation pairs are statistically significant**.

```{r}
wine.sig = cor.mtest(wine.cor, conf.level= .95)

corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

#### 2.7.6 Reorder a corrgram

Matrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). Currently, corrplot package support four sorting methods, they are:

1.  “AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.

2.  “FPC” for the first principal component order.

3.  “hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.

    -   “hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.

4.  “alphabet” for alphabetical order.

::: {.callout-note appearance="simple"}
More algorithms can be found in **seriation** package.
:::

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="AOE",
               tl.col = "black")
```

#### 2.7.7 Reorder a correlation matrix using hclust

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```

## 3 Heatmap for Visualising and Analysing Multivariate Data

### 3.1 Overview

Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in row and colouring the cells within the table.

Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.

In this hands-on exercise, the data of [**World Happines 2018 report**](https://worldhappiness.report/ed/2018/) will be used.

### 3.2 Loading Packages

```{r}
pacman::p_load(seriation, dendextend, heatmaply, tidyverse)
```

### 3.3 Import Data & Data Preparation

Importing Data:

```{r}
wh <- read_csv("data/WHData-2018.csv")
```

Preparing the data - changing rows by country name instead of row number:

```{r}
row.names(wh) <- wh$Country
```

Transfer the data loaded into a data matrix instead of a data frame:

```{r}
wh1 <- dplyr::select(wh, c(3, 7:12))
wh_matrix <- data.matrix(wh)
```

### 3.4 Static Heatmap

In this section, we will learn how to plot static heatmaps by using `heatmap()` of R Stats package.

```{r}
wh_heatmap <- heatmap(wh_matrix,
                      Rowv=NA, Colv=NA)
```

::: {.callout-note appearance="simple"}
By default, **heatmap()** plots a cluster heatmap. The arguments ***Rowv=NA*** and ***Colv=NA*** are used to switch off the option of plotting the row and column dendrograms.
:::

Plotting a cluster heatmap:

```{r}
wh_heatmap <- heatmap(wh_matrix)
```

::: {.callout-important appearance="simple"}
The order of both rows and columns is different compare to the native wh_matrix. This is because:

-   heatmap does a reordering using clusterisation - calculates the distance between each pair of rows and columns and try to order them by similarity.
-   corresponding dendogram provided beside the heatmap

This heatmap is not really informative because:

-   matrix needs to be normalized, if not variables with small values all look the same
:::

```{r}
wh_heatmap <- heatmap(wh_matrix,
                      scale="column",
                      cexRow = 0.6, 
                      cexCol = 0.8,
                      margins = c(10, 4))
```

::: {.callout-note appearance="simple"}
**Note that:**

-   values are scaled

-   **margins** argument is used to ensure that the entire x-axis labels are displayed completely

-   **cexRow** and **cexCol** arguments used to define the font size used for y-axis and x-axis labels respectively
:::

### 3.5 Creating Interactive Heatmap

[**heatmaply**](https://talgalili.github.io/heatmaply/index.html)is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file.

In this section, we will be using **heatmaply** to design an interactive cluster heatmap.

#### 3.5.1 Working with heatmaply

```{r}
heatmaply(mtcars)
```

```{r}
heatmaply(wh_matrix[, -c(1, 2, 4, 5)])
```

::: {.callout-note appearance="simple"}
Different from `heatmap()`, for `heatmaply()` :

-   default horizontal dendrogram is on the left hand side of the heatmap

-   text label i placed on the right hand side of the heatmap

-   when the x-axis marker labels are too long, they will be rotated by 135 degree from the north
:::

#### 3.5.2 Data transformation

3 main data transformation methods are supported by `heatmaply()`, namely: scale, normalise and percentile.

#### 3.5.2.1 Scaling method

-   Assuming some normal distribution, then scaling (i.e. subtract the mean and divide by the standard deviation) would bring the variables closer to the standard normal distribution

-   Each value would reflect the distance from the mean in units of standard deviation

```{r}
heatmaply(wh_matrix[, -c(1, 2, 4, 5)],
          scale = "column")
```

#### 3.5.2.2 Normalising method

-   When variables in the data comes from different, and non-normal distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations - makes the variables comparable on the same scale.

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))
```

#### 3.5.2.3 Percentising method

-   Similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.

-   Done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.

```{r}
heatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))
```

#### 3.5.3 Clustering algorithm

**heatmaply** supports a variety of hierarchical clustering algorithm. In general, a clustering model can be calibrated either manually or statistically.

#### 3.5.4 Manual approach

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          dist_method = "euclidean",
          hclust_method = "ward.D")
```

#### 3.5.5 Statistical approach

1.  `dend_expend()` will be used to determine the recommended clustering method to be used:

```{r}
wh_d <- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = "euclidean")
dend_expend(wh_d)[[3]]
```

The output table shows that “average” method should be used because it gave the high optimum value.

2.  `find_k()` is used to determine the optimal number of cluster:

```{r}
wh_clust <- hclust(wh_d, method = "average")
num_k <- find_k(wh_clust)
plot(num_k)
```

::: {.callout-note appearance="simple"}
Figure shows that k=3 would be good.
:::

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          dist_method = "euclidean",
          hclust_method = "average",
          k_row = 3)
```

#### 3.5.6 Seriation

One of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings.

**heatmaply** uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that **the sum of distances between each adjacent leaf (label) will be minimized**.

Here we meet our first seriation algorithm: **Optimal Leaf Ordering (OLO)**. This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves.

Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above:

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "OLO")
```

::: panel-tabset
## GW

-   aims for the same goal as the default option of OLO but uses a potentially faster heuristic

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "GW")
```

## Mean
-   gives the output we would get by default from heatmap functions in other packages

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "mean")
```

## None
-   gives the dendrograms without any rotation that is based on the data matrix

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "none")
```

:::

#### 3.5.7 working with colour palettes

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "none",
          colors = Reds)
```

#### 3.5.8 The finishing touch
```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          Colv=NA,
          seriate = "none",
          colors = Blues,
          k_row = 5,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="World Happiness Score and Variables by Country, 2018 \nDataTransformation using Normalise Method",
          xlab = "World Happiness Indicators",
          ylab = "World Countries"
          )
```