---
title: "Take-Home Exercise 1: 
Ship Performance in the Gulf of Guinea"
author: "Leng Yi Xiu"
date: "Feb 01 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

## 1 Overview

The Gulf of Guinea is a crucial maritime hub, but ship performance is affected by environmental conditions, security risks, and regulatory factors. Strong currents, high humidity, and piracy also impact navigation, fuel efficiency, and operational costs.

Key metrics such as vessel speed, fuel consumption, turnaround time, and security-related delays play a crucial role in determining shipping efficiency. Analyzing these factors is essential for optimizing operations and enhancing maritime security in the region.

### 1.1 The Task

For this week's article, we will be using various data visualisation techniques to explore the different factors affecting ship performance in the Gulf of Guinea.

### 1.2 The Dataset

The ship performance dataset ([**Kaggle**](https://www.kaggle.com/datasets/jeleeladekunlefijabi/ship-performance-clustering-dataset)) contains data on essential operational metrics and characteristics of different ship types operating in the Gulf of Guinea.

The raw dataset consists of **2736 rows** and **24 columns**, with some of the key features below:

::: callout-tip
## Numerical Features

-   **Speed_Over_Ground_knots**: Average speed of the ship over water (in knots).

-   **Engine_Power_kW**: Engine power output (in kilowatts).

-   **Distance_Traveled_nm**: Total distance traveled by the ship (in nautical miles).

-   **Operational_Cost_USD**: Total operational cost per voyage (in USD).

-   **Revenue_per_Voyage_USD**: Revenue generated per voyage (in USD).

-   **Efficiency_nm_per_kWh**: Energy efficiency calculated in nautical miles per kilowatt-hour.
:::

::: callout-tip
## Categorical Features

-   **Ship_Type**: Type of ship (e.g., Tanker, Container Ship, Fish Carrier, Bulk Carrier).

-   **Route_Type**: Shipping route type (e.g., Short-haul, Long-haul, Transoceanic).

-   **Engine_Type**: Type of engine (e.g., Diesel, Heavy Fuel Oil).

-   **Maintenance_Status**: Maintenance condition of the ship (e.g., Fair, Critical, Good).

-   **Weather_Condition**: Prevailing weather conditions during voyages (e.g., Calm, Moderate, Rough).
:::

## 2 Loading R packages and data

### 2.1 Loading R packages

The following code chunk is used to install necessary packages for this article:

```{r}
pacman::p_load(tidyverse, ggdist, ggridges, 
               ggthemes, colorspace, ggiraph, 
               ggtext, gganimate, plotly, DT,
               readxl, gifski, gapminder)
```

### 2.2 Import Data

Importing the csv data file:

```{r}
ship_data <- read_csv("data/Ship_Performance_Dataset.csv")
```

## 3 Data Preparation

Before conducting exploratory data analysis, we must first gain a deeper understanding of the dataset and perform essential data preparation steps, including:

1.  Verifying all data types,

2.  Identifying duplicate records, and

3.  Checking for missing values.

### 3.1 Verify Data Types

Code chunk to verify that all data types in the dataset is correct:

```{r}
#| code-fold: true
glimpse(ship_data)
```

To further understand the categorical features and values used for each feature, the following code chunk is used to list out the unique values for each categorical column:

```{r}
#| code-fold: true
categorical_cols <- ship_data %>%
  select(where(is.character))

# Show unique values for each categorical column
unique_vals <- categorical_cols %>%
  map(~ unique(.))

print(unique_vals)
```

::: callout-caution
## To Note

As observed, all the categorical columns have unique value stated as "None" which can be interpreted as a missing value in the data.

This will need to be addressed in 3.3 Check for missing values.
:::

### 3.2 Identify duplicate records

```{r}
#| code-fold: true
duplicate <- ship_data %>% 
  group_by_all() %>% 
  filter(n()>1) %>% 
  ungroup()
  
duplicate
```

### 3.3 Check for missing values

```{r}
#| code-fold: true
missing_data <- is.na(ship_data)

# Filter rows where there is at least one TRUE (missing value)
missing_row <- ship_data[apply(missing_data, 1, any), ]
print(missing_row)
```

```{r}
#| code-fold: true
none_vals <- ship_data %>%
  filter(if_any(where(is.character), ~ . == "None"))

print(none_vals)
```

```{r}
#| code-fold: true
ship_data_clean <- ship_data %>%
  filter(!if_any(where(is.character), ~ . == "None"))

glimpse(ship_data_clean)
```

## 4 Exploratory Data Analysis

### 4.1 Univariate: Frequency Counts for all features

::: callout-important
## Observations

-   Use of bar charts to look at the distribution of data across all categorical features
-   Data observed is generally evenly distributed and each categorical feature is evenly represented
:::

::: panel-tabset
## Categorical Features

```{r}
#| code-fold: true
# Select categorical columns
cat_cols <- c("Ship_Type", "Route_Type", "Engine_Type", "Maintenance_Status", "Weather_Condition")

# Pivot data to long format
ship_data_categorical <- ship_data_clean %>%
  select(all_of(cat_cols)) %>%
  pivot_longer(cols = everything(), names_to = "variable", values_to = "category")

# Plot faceted bar charts
ggplot(ship_data_categorical, aes(x = category, fill = variable)) +
  geom_bar(color = "black") +
  geom_text(stat = "count", aes(label = after_stat(count)), hjust = -0.2, size = 2.5) +
  coord_flip(clip = "off", expand = FALSE) +
  facet_wrap(~variable, scales = "free_y") +  
  theme_minimal(base_size = 10) +
  scale_fill_brewer(palette = "Set3") +
  labs(title = "Distribution of Categorical Features",
       x = "Category",
       y = "Count") +
  theme(legend.position = "none",
    plot.title = element_text(face = "bold", hjust = 0.5, size = 10))
```

## Numeric Features

```{r}
#| code-fold: true
# Pivot data to long format
ship_data_numeric <- ship_data_clean %>%
  pivot_longer(cols = where(is.numeric), 
               names_to = "Feature", 
               values_to = "Numeric")

# Plot faceted histograms
ggplot(ship_data_numeric, aes(x = Numeric, fill = Feature)) +
  geom_histogram(color = "black", bins = 30, alpha = 0.7) +  
  facet_wrap(~Feature, scales = "free") +  
  theme_minimal(base_size = 10) +
  scale_fill_brewer(palette = "Set3") +
  labs(title = "Distribution of Numeric Features",
       x = "Value",
       y = "Frequency") +
  theme(legend.position = "none",
        strip.text = element_text(size = 10),
        plot.title = element_text(face = "bold", size = 10, hjust = 0.5),
        plot.margin = margin(10, 10, 10, 10))  
```
:::

### 4.2 Visualizing Correlation Matrix of Numeric Features

```{r}
#| code-fold: true
ship_data_clean[, c(6:9, 11:18)] <- scale(ship_data_clean[, c(6:9, 11:18)])
```

```{r}
#| code-fold: true
ggstatsplot::ggcorrmat(
  data = ship_data_clean, 
  cor.vars = c(6:9, 11:18),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for Ship Data",
  subtitle = "All pairs: no significant at p < 0.05"
)
```

### 4.3 Bivariate: Factors affecting Numeric Features

::: panel-tabset
## Ship Type

```{r}
#| code-fold: true
# Boxplot with facets
ggplot(data = ship_data_numeric, 
       aes(y = Numeric, x = Ship_Type)) +  # x maps to Ship_Type
  geom_boxplot(outlier.shape = 16,  
               outlier.colour = "blue",  
               outlier.size = 1) +       
  geom_point(stat="summary",        
             fun="mean",           
             colour="pink",          
             size=3) +
  labs(title = "Box Plots of All Numeric Features by Ship Type") +
  facet_wrap(~Feature, scales = "free_y") +
   theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  
    strip.text = element_text(size = 8, lineheight = 1.1),
    plot.margin = margin(10, 10, 10, 10),  
    panel.spacing = unit(0.5, "lines")  
   )
```

## Route Type

```{r}
#| code-fold: true
# Boxplot with facets
ggplot(data = ship_data_numeric, 
       aes(y = Numeric, x = Route_Type)) +  # x maps to Route Type
  geom_boxplot(outlier.shape = 16,  
               outlier.colour = "blue",  
               outlier.size = 1) +       
  geom_point(stat="summary",        
             fun="mean",           
             colour="pink",          
             size=3) +
  labs(title = "Box Plots of All Numeric Features by Route Type") +
  facet_wrap(~Feature, scales = "free_y") +
   theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  
    strip.text = element_text(size = 8, lineheight = 1.1),
    plot.margin = margin(10, 10, 10, 10),  
    panel.spacing = unit(0.5, "lines")  
   )
```

## Engine Type

```{r}
#| code-fold: true
# Boxplot with facets
ggplot(data = ship_data_numeric, 
       aes(y = Numeric, x = Engine_Type)) +  # x maps to Engine_Type
  geom_boxplot(outlier.shape = 16,  
               outlier.colour = "blue",  
               outlier.size = 1) +       
  geom_point(stat="summary",        
             fun="mean",           
             colour="pink",          
             size=3) +
  labs(title = "Box Plots of All Numeric Features by Engine Type") +
  facet_wrap(~Feature, scales = "free_y") +
   theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  
    strip.text = element_text(size = 8, lineheight = 1.1),
    plot.margin = margin(10, 10, 10, 10),  
    panel.spacing = unit(0.5, "lines")  
   )
```

## Maintenance Status

```{r}
#| code-fold: true
# Boxplot with facets
ggplot(data = ship_data_numeric, 
       aes(y = Numeric, x = Maintenance_Status)) +  # x maps to Maintenance Status
  geom_boxplot(outlier.shape = 16,  
               outlier.colour = "blue",  
               outlier.size = 1) +       
  geom_point(stat="summary",        
             fun="mean",           
             colour="pink",          
             size=3) +
  labs(title = "Box Plots of All Numeric Features by Maintenance Status") +
  facet_wrap(~Feature, scales = "free_y") +
   theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  
    strip.text = element_text(size = 8, lineheight = 1.1),
    plot.margin = margin(10, 10, 10, 10),  
    panel.spacing = unit(0.5, "lines")  
   )
```

## Weather Conditions

```{r}
#| code-fold: true
# Boxplot with facets
ggplot(data = ship_data_numeric, 
       aes(y = Numeric, x = Weather_Condition)) +  # x maps to Weather Conditions
  geom_boxplot(outlier.shape = 16,  
               outlier.colour = "blue",  
               outlier.size = 1) +       
  geom_point(stat="summary",        
             fun="mean",           
             colour="pink",          
             size=3) +
  labs(title = "Box Plots of All Numeric Features by Weather Conditions") +
  facet_wrap(~Feature, scales = "free_y") +
   theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  
    strip.text = element_text(size = 8, lineheight = 1.1),
    plot.margin = margin(10, 10, 10, 10),  
    panel.spacing = unit(0.5, "lines")  
   )
```
:::

### 4.4

### 4.5
