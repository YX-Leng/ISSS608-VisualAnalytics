---
title: "Hands-on Exercise 5"
author: "Leng Yi Xiu"
date: "Feb 08 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

## 1 Creating Ternary Plot with R

### 1.1 Overview

Ternary plots are a way of displaying the distribution and variability of **three-part compositional data**. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.

### 1.2 Loading R Packages

-   [**ggtern**](http://www.ggtern.com/), a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.

-   [**Plotly R**](https://plot.ly/r/), an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The **plotly R** libary contains the *ggplotly* function, which will convert **ggplot2** figures into a Plotly object.

```{r}
pacman::p_load(plotly, ggtern, tidyverse)
```

### 1.3 Import Data & Data Preparation

Import Data:

```{r}
#Reading the data into R environment
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

Preparing the data to derive 3 new measures:

```{r}
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

### 1.4 Plotting Ternary Diagram with R

### 1.4.1 Plotting a static ternary diagram

```{r}
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()
```

To add labels and theme:

```{r}
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2015") +
  theme_rgbw()
```

### 1.4.2 Plotting an interactive ternary diagram using plot_ly()

```{r}
# reusable function for creating annotation object
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```

## 2 Visual Correlation Analysis

### 2.1 Overview

Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0.

A correlation coefficient of 1 shows a **perfect linear relationship** between the two variables, while a -1.0 shows a p**erfect inverse relationship** between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.

3 reasons for computing a correlation matrix:

-   To reveal the relationship between high-dimensional variables pair-wisely

-   To input into other analyses, e.g. people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.

-   As a diagnostic when checking other analyses.

::: {.callout-tip appearance="simple"}
[**Corrgram**](http://www.datavis.ca/papers/corrgram.pdf) tend to be used to visually explore and analyse the structure and the patterns of relations among variables. 

It is designed based on two main schemes:

-   Rendering the value of a correlation to depict its sign and magnitude, and

-   Reordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.
:::

### 2.2 Loading R Packages

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse)
```

### 2.3 Import Data & Data Preparation

The Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of **13 variables** and 6497 observations.

```{r}
wine <- read_csv("data/wine_quality.csv")
```

```{r}
summary(wine)
```

### 2.4 Building Correlation Matrix: `pairs()` method

#### 2.4.1 Building a basic correlation matrix

```{r}
pairs(wine[,1:11])
```

::: {.callout-note appearance="simple"}
Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.
:::

```{r}
pairs(wine[,2:12])
```

#### 2.4.2 Drawing the lower corner

::: {.callout-tip appearance="simple"}
It is a common practice to show either the upper half or lower half of the correlation matrix instead of both because a correlation matrix is symmetric.

-   Use upper.panel or lower.panel argument
:::

```{r}
pairs(wine[,2:12], upper.panel = NULL)
```

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

#### 2.4.3 including with correlation coefficients

```{r}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```

### 2.5 Visualising Correlation Matrix: `ggcormat()`

::: {.callout-caution appearance="simple"}
One of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations).

-   **Corrgram** data visualisation technique can be used to overcome this problem
:::

#### 2.5.1 The basic plot

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05")


# Used to control specific components of the plot
ggplot.component = list(
    theme(text=element_text(size=5),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 8)))
```

### 2.6 Building multiple plots

```{r}
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)
```