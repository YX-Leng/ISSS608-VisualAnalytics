{
  "hash": "c616204746e0580cbc6057737fe455c5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 1: Ship Performance in the Gulf of Guinea\"\nauthor: \"Leng Yi Xiu\"\ndate: \"Feb 01 2025\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  format: html\n  css: styles.css\n---\n\n\n## 1 Overview\n\nThe Gulf of Guinea is a crucial maritime hub, but ship performance is affected by environmental conditions, security risks, and regulatory factors. Strong currents, high humidity, and piracy also impact navigation, fuel efficiency, and operational costs.\n\nKey metrics such as vessel speed, fuel consumption, turnaround time, and security-related delays play a crucial role in determining shipping efficiency. Analyzing these factors is essential for optimizing operations and enhancing maritime security in the region.\n\n### 1.1 The Task\n\nFor this week's article, we will be using various data visualisation techniques to explore the different factors affecting ship performance in the Gulf of Guinea.\n\n### 1.2 The Dataset\n\nThe ship performance dataset ([**Kaggle**](https://www.kaggle.com/datasets/jeleeladekunlefijabi/ship-performance-clustering-dataset)) contains data on essential operational metrics and characteristics of different ship types operating in the Gulf of Guinea.\n\nThe raw dataset consists of **2,736 rows** and **18 columns**, with some of the key features below:\n\n::: callout-tip\n## Numerical Features\n\n-   **Speed_Over_Ground_knots**: Average speed of the ship over water (in knots).\n\n-   **Engine_Power_kW**: Engine power output (in kilowatts).\n\n-   **Distance_Traveled_nm**: Total distance traveled by the ship (in nautical miles).\n\n-   **Operational_Cost_USD**: Total operational cost per voyage (in USD).\n\n-   **Revenue_per_Voyage_USD**: Revenue generated per voyage (in USD).\n\n-   **Efficiency_nm_per_kWh**: Energy efficiency calculated in nautical miles per kilowatt-hour.\n:::\n\n::: callout-tip\n## Categorical Features\n\n-   **Ship_Type**: Type of ship (e.g., Tanker, Container Ship, Fish Carrier, Bulk Carrier).\n\n-   **Route_Type**: Shipping route type (e.g., Short-haul, Long-haul, Transoceanic).\n\n-   **Engine_Type**: Type of engine (e.g., Diesel, Heavy Fuel Oil).\n\n-   **Maintenance_Status**: Maintenance condition of the ship (e.g., Fair, Critical, Good).\n\n-   **Weather_Condition**: Prevailing weather conditions during voyages (e.g., Calm, Moderate, Rough).\n:::\n\n## 2 Loading R packages and data\n\n### 2.1 Loading R packages\n\nðŸ“Œ The following code chunk is used to install necessary packages for this article:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(dplyr, tidyverse, ggdist, lubridate, \n               ggthemes, colorspace, ggiraph, \n               ggtext, gganimate, plotly, readxl, \n               gifski, gapminder, factoextra, cluster)\n```\n:::\n\n\n### 2.2 Import Data\n\nðŸ“Œ Importing the csv data file and mutating categorical data to factors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"Ship_Type\", \"Route_Type\", \"Engine_Type\",\"Maintenance_Status\",\"Weather_Condition\")\nship_data <- read_csv(\"data/Ship_Performance_Dataset.csv\") %>%\n  mutate(across(cols, as.factor))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 2736 Columns: 18\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr   (5): Ship_Type, Route_Type, Engine_Type, Maintenance_Status, Weather_C...\ndbl  (12): Speed_Over_Ground_knots, Engine_Power_kW, Distance_Traveled_nm, D...\ndate  (1): Date\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `mutate()`.\nâ„¹ In argument: `across(cols, as.factor)`.\nCaused by warning:\n! Using an external vector in selections was deprecated in tidyselect 1.1.0.\nâ„¹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(cols)\n\n  # Now:\n  data %>% select(all_of(cols))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n\n\n:::\n:::\n\n\n## 3 Data Preparation\n\nBefore conducting exploratory data analysis, we must first gain a deeper understanding of the dataset and perform essential data preparation steps, including:\n\n1.  Verifying all data types,\n\n2.  Identifying duplicate records, and\n\n3.  Checking for missing values.\n\n### 3.1 Verify Data Types\n\nðŸ“Œ Code chunk to verify that all data types in the dataset is correct:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nglimpse(ship_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,736\nColumns: 18\n$ Date                    <date> 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2â€¦\n$ Ship_Type               <fct> Container Ship, Fish Carrier, Container Ship, â€¦\n$ Route_Type              <fct> None, Short-haul, Long-haul, Transoceanic, Traâ€¦\n$ Engine_Type             <fct> Heavy Fuel Oil (HFO), Steam Turbine, Diesel, Sâ€¦\n$ Maintenance_Status      <fct> Critical, Good, Fair, Fair, Fair, Fair, Criticâ€¦\n$ Speed_Over_Ground_knots <dbl> 12.59756, 10.38758, 20.74975, 21.05510, 13.742â€¦\n$ Engine_Power_kW         <dbl> 2062.9840, 1796.0574, 1648.5567, 915.2618, 108â€¦\n$ Distance_Traveled_nm    <dbl> 1030.9436, 1060.4864, 658.8741, 1126.8225, 144â€¦\n$ Draft_meters            <dbl> 14.132284, 14.653083, 7.199261, 11.789063, 9.7â€¦\n$ Weather_Condition       <fct> Moderate, Rough, Moderate, Moderate, Moderate,â€¦\n$ Cargo_Weight_tons       <dbl> 1959.0179, 162.3947, 178.0409, 1737.3853, 260.â€¦\n$ Operational_Cost_USD    <dbl> 483832.35, 483388.00, 448543.40, 261349.61, 28â€¦\n$ Revenue_per_Voyage_USD  <dbl> 292183.27, 883765.79, 394018.75, 87551.38, 676â€¦\n$ Turnaround_Time_hours   <dbl> 25.86708, 63.24820, 49.41815, 22.40911, 64.158â€¦\n$ Efficiency_nm_per_kWh   <dbl> 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.â€¦\n$ Seasonal_Impact_Score   <dbl> 1.4156533, 0.8856478, 1.4058132, 1.3707043, 0.â€¦\n$ Weekly_Voyage_Count     <dbl> 1, 6, 9, 1, 8, 7, 3, 6, 8, 2, 9, 4, 3, 7, 7, 3â€¦\n$ Average_Load_Percentage <dbl> 93.76925, 93.89537, 96.21824, 66.19370, 80.008â€¦\n```\n\n\n:::\n:::\n\n\nðŸ“Œ To further understand the categorical features and values used for each feature, the following code chunk is used to list out the unique values for each categorical column:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncategorical_cols <- ship_data %>%\n  select(where(~is.factor(.)))\n\n# Show unique values for each categorical column\nunique_vals <- categorical_cols %>%\n  map(~ unique(.))\n\nprint(unique_vals)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Ship_Type\n[1] Container Ship Fish Carrier   Bulk Carrier   None           Tanker        \nLevels: Bulk Carrier Container Ship Fish Carrier None Tanker\n\n$Route_Type\n[1] None         Short-haul   Long-haul    Transoceanic Coastal     \nLevels: Coastal Long-haul None Short-haul Transoceanic\n\n$Engine_Type\n[1] Heavy Fuel Oil (HFO) Steam Turbine        Diesel              \n[4] None                \nLevels: Diesel Heavy Fuel Oil (HFO) None Steam Turbine\n\n$Maintenance_Status\n[1] Critical Good     Fair     None    \nLevels: Critical Fair Good None\n\n$Weather_Condition\n[1] Moderate Rough    Calm     None    \nLevels: Calm Moderate None Rough\n```\n\n\n:::\n:::\n\n\n::: callout-caution\n## To Note\n\nAs observed, all the categorical columns have unique value stated as \"None\" which can be interpreted as a missing value in the data.\n\nThis will need to be addressed in **3.3 Check for missing values**.\n:::\n\n### 3.2 Identify duplicate records\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nduplicate <- ship_data %>% \n  group_by_all() %>% \n  filter(n()>1) %>% \n  ungroup()\n  \nduplicate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 Ã— 18\n# â„¹ 18 variables: Date <date>, Ship_Type <fct>, Route_Type <fct>,\n#   Engine_Type <fct>, Maintenance_Status <fct>, Speed_Over_Ground_knots <dbl>,\n#   Engine_Power_kW <dbl>, Distance_Traveled_nm <dbl>, Draft_meters <dbl>,\n#   Weather_Condition <fct>, Cargo_Weight_tons <dbl>,\n#   Operational_Cost_USD <dbl>, Revenue_per_Voyage_USD <dbl>,\n#   Turnaround_Time_hours <dbl>, Efficiency_nm_per_kWh <dbl>,\n#   Seasonal_Impact_Score <dbl>, Weekly_Voyage_Count <dbl>, â€¦\n```\n\n\n:::\n:::\n\n\n::: callout-note\n## Note\n\n-   No duplicate records identified.\n:::\n\n### 3.3 Check for missing values\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmissing_data <- is.na(ship_data)\n\n# Filter rows where there is at least one TRUE (missing value)\nmissing_row <- ship_data[apply(missing_data, 1, any), ]\nprint(missing_row)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 Ã— 18\n# â„¹ 18 variables: Date <date>, Ship_Type <fct>, Route_Type <fct>,\n#   Engine_Type <fct>, Maintenance_Status <fct>, Speed_Over_Ground_knots <dbl>,\n#   Engine_Power_kW <dbl>, Distance_Traveled_nm <dbl>, Draft_meters <dbl>,\n#   Weather_Condition <fct>, Cargo_Weight_tons <dbl>,\n#   Operational_Cost_USD <dbl>, Revenue_per_Voyage_USD <dbl>,\n#   Turnaround_Time_hours <dbl>, Efficiency_nm_per_kWh <dbl>,\n#   Seasonal_Impact_Score <dbl>, Weekly_Voyage_Count <dbl>, â€¦\n```\n\n\n:::\n:::\n\n\n::: callout-note\n## Note\n\n-   No missing values identified.\n\n-   However, data wrangling required to exclude categorical features that have \"None\" indicated. Following code chunks are used to identify records that have \"None\" indicated in any one of the categorical features and to filter them out from the clean dataset for analysis.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nnone_vals <- ship_data %>%\n  filter(if_any(where(is.factor), ~ . == \"None\"))\n\nprint(none_vals)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 609 Ã— 18\n   Date       Ship_Type      Route_Type Engine_Type          Maintenance_Status\n   <date>     <fct>          <fct>      <fct>                <fct>             \n 1 2023-06-04 Container Ship None       Heavy Fuel Oil (HFO) Critical          \n 2 2023-07-30 None           Coastal    Heavy Fuel Oil (HFO) Good              \n 3 2023-09-17 Tanker         Long-haul  None                 Good              \n 4 2023-10-22 Container Ship None       Diesel               Critical          \n 5 2023-10-29 Bulk Carrier   Short-haul Diesel               None              \n 6 2023-11-05 None           Coastal    Heavy Fuel Oil (HFO) Good              \n 7 2023-11-19 None           Coastal    Diesel               Good              \n 8 2023-12-03 None           Coastal    Heavy Fuel Oil (HFO) Critical          \n 9 2024-01-14 Bulk Carrier   None       Heavy Fuel Oil (HFO) Critical          \n10 2024-03-24 Tanker         None       Steam Turbine        Critical          \n# â„¹ 599 more rows\n# â„¹ 13 more variables: Speed_Over_Ground_knots <dbl>, Engine_Power_kW <dbl>,\n#   Distance_Traveled_nm <dbl>, Draft_meters <dbl>, Weather_Condition <fct>,\n#   Cargo_Weight_tons <dbl>, Operational_Cost_USD <dbl>,\n#   Revenue_per_Voyage_USD <dbl>, Turnaround_Time_hours <dbl>,\n#   Efficiency_nm_per_kWh <dbl>, Seasonal_Impact_Score <dbl>,\n#   Weekly_Voyage_Count <dbl>, Average_Load_Percentage <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nship_data_clean <- ship_data %>%\n  filter(!if_any(where(is.factor), ~ . == \"None\"))\n\nglimpse(ship_data_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,127\nColumns: 18\n$ Date                    <date> 2023-06-11, 2023-06-18, 2023-06-25, 2023-07-0â€¦\n$ Ship_Type               <fct> Fish Carrier, Container Ship, Bulk Carrier, Fiâ€¦\n$ Route_Type              <fct> Short-haul, Long-haul, Transoceanic, Transoceaâ€¦\n$ Engine_Type             <fct> Steam Turbine, Diesel, Steam Turbine, Diesel, â€¦\n$ Maintenance_Status      <fct> Good, Fair, Fair, Fair, Fair, Critical, Criticâ€¦\n$ Speed_Over_Ground_knots <dbl> 10.38758, 20.74975, 21.05510, 13.74278, 18.616â€¦\n$ Engine_Power_kW         <dbl> 1796.0574, 1648.5567, 915.2618, 1089.7218, 217â€¦\n$ Distance_Traveled_nm    <dbl> 1060.4864, 658.8741, 1126.8225, 1445.2812, 723â€¦\n$ Draft_meters            <dbl> 14.653083, 7.199261, 11.789063, 9.727833, 14.9â€¦\n$ Weather_Condition       <fct> Rough, Moderate, Moderate, Moderate, Rough, Roâ€¦\n$ Cargo_Weight_tons       <dbl> 162.3947, 178.0409, 1737.3853, 260.5951, 1912.â€¦\n$ Operational_Cost_USD    <dbl> 483388.00, 448543.40, 261349.61, 287718.38, 18â€¦\n$ Revenue_per_Voyage_USD  <dbl> 883765.79, 394018.75, 87551.38, 676121.46, 776â€¦\n$ Turnaround_Time_hours   <dbl> 63.24820, 49.41815, 22.40911, 64.15823, 47.476â€¦\n$ Efficiency_nm_per_kWh   <dbl> 0.2903614, 0.4995945, 0.7029057, 1.3313431, 1.â€¦\n$ Seasonal_Impact_Score   <dbl> 0.8856478, 1.4058132, 1.3707043, 0.5833834, 1.â€¦\n$ Weekly_Voyage_Count     <dbl> 6, 9, 1, 8, 7, 3, 6, 2, 9, 4, 3, 7, 7, 2, 4, 3â€¦\n$ Average_Load_Percentage <dbl> 93.89537, 96.21824, 66.19370, 80.00858, 53.174â€¦\n```\n\n\n:::\n:::\n\n\n::: callout-important\n## Observations\n\nAfter cleaning up the data and excluding records where categorical data has \"None\" indicated, the clean dataset consists of **2,127 rows** and **18 columns.**\n\nWith this, we can proceed to our Exploratory Data Analysis (EDA).\n:::\n\n## 4 Exploratory Data Analysis (EDA)\n\n### 4.1 Univariate: Frequency Counts for all features\n\nFor EDA, we firstly run a distribution analysis across all the categorical and numerical features to understand the representation of each feature.\n\n-   Use of `geom_bar()` and `geom_histogram()` to look at the distribution of data across all categorical features.\n-   Use of `facet_wrap()` to view multiple plots in a grid - particularly useful for visualizing how a certain feature behaves across different subsets of the data.\n\n::: panel-tabset\n## Categorical Features\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Select categorical columns\ncat_cols <- c(\"Ship_Type\", \"Route_Type\", \"Engine_Type\", \"Maintenance_Status\", \"Weather_Condition\")\n\n# Pivot data to long format\nship_data_categorical <- ship_data_clean %>%\n  select(all_of(cat_cols)) %>%\n  pivot_longer(cols = everything(), names_to = \"variable\", values_to = \"category\")\n\n# Plot faceted bar charts\nggplot(ship_data_categorical, aes(x = category, fill = variable)) +\n  geom_bar(color = \"black\") +\n  geom_text(stat = \"count\", aes(label = after_stat(count)), hjust = -0.2, size = 2.5) +\n  coord_flip(clip = \"off\", expand = FALSE) +\n  facet_wrap(~variable, scales = \"free_y\") +  \n  theme_minimal(base_size = 10) +\n  scale_fill_brewer(palette = \"Set3\") +\n  labs(title = \"Distribution of Categorical Features\",\n       x = \"Category\",\n       y = \"Count\") +\n  theme(legend.position = \"none\",\n    plot.title = element_text(face = \"bold\", hjust = 0.5, size = 10))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Numeric Features\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Pivot data to long format\nship_data_numeric <- ship_data_clean %>%\n  pivot_longer(cols = where(is.numeric), \n               names_to = \"Feature\", \n               values_to = \"Numeric\")\n\n# Plot faceted histograms\nggplot(ship_data_numeric, aes(x = Numeric, fill = Feature)) +\n  geom_histogram(color = \"black\", bins = 30, alpha = 0.7) +  \n  facet_wrap(~Feature, scales = \"free\") +  \n  theme_minimal(base_size = 10) +\n  scale_fill_brewer(palette = \"Set3\") +\n  labs(title = \"Distribution of Numeric Features\",\n       x = \"Value\",\n       y = \"Frequency\") +\n  theme(legend.position = \"none\",\n        strip.text = element_text(size = 10),\n        plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),\n        plot.margin = margin(10, 10, 10, 10))  \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n:::\n\n::: callout-important\n## Observations\n\n-   Data observed is generally **evenly distributed**. Each categorical and numerical feature is evenly represented.\n-   Generally no significant outliers observed from the dataset.\n:::\n\n### 4.2 Visualizing Correlation Matrix of Numeric Features\n\nNext, we move on to understanding relationships between the numeric features in the dataset. This is to identify if any of the features influence one another.\n\nTo understand this, we will make use of a correlation matrix to measure the strength of the relationship between two features. This is visualized using `ggcormat()` of the **ggstatsplot** package.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nscaled_cols <- scale(ship_data_clean[, c(6:9, 11:18)])\nscaled_cols <- as.data.frame(scaled_cols)\nship_data_scale <- cbind(ship_data_clean[, -c(6:9, 11:18)], scaled_cols)\nship_data_scale <- as.data.frame(ship_data_scale)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggstatsplot::ggcorrmat(\n  data = ship_data_scale, \n  cor.vars = c(6:9, 11:18),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlation Matrix for Ship Performance\",\n  subtitle = \"All pairs: no significant at p < 0.05\"\n)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n::: callout-important\n## Observations\n\n-   Features do not have strong linear relationships with each other.\n\n-   None of the correlations between these features are statistically significant at the p \\< 0.05 level, possibly due to over-scaling / normalization of the data.\n\n-   Other types of non-linear relationships (i.e. clustering) should be considered.\n:::\n\n### 4.3 Bivariate: Factors affecting Numeric Features\n\n::: panel-tabset\n## Ship Type\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Boxplot with facets\nggplot(data = ship_data_numeric, \n       aes(y = Numeric, x = Ship_Type)) +  # x maps to Ship_Type\n  geom_boxplot(outlier.shape = 16,  \n               outlier.colour = \"blue\",  \n               outlier.size = 1) +       \n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"pink\",          \n             size=3) +\n  labs(title = \"Box Plots of All Numeric Features by Ship Type\") +\n  facet_wrap(~Feature, scales = \"free_y\") +\n   theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  \n    strip.text = element_text(size = 8, lineheight = 1.1),\n    plot.margin = margin(10, 10, 10, 10),  \n    panel.spacing = unit(0.5, \"lines\")  \n   )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Route Type\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Boxplot with facets\nggplot(data = ship_data_numeric, \n       aes(y = Numeric, x = Route_Type)) +  # x maps to Route Type\n  geom_boxplot(outlier.shape = 16,  \n               outlier.colour = \"blue\",  \n               outlier.size = 1) +       \n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"pink\",          \n             size=3) +\n  labs(title = \"Box Plots of All Numeric Features by Route Type\") +\n  facet_wrap(~Feature, scales = \"free_y\") +\n   theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  \n    strip.text = element_text(size = 8, lineheight = 1.1),\n    plot.margin = margin(10, 10, 10, 10),  \n    panel.spacing = unit(0.5, \"lines\")  \n   )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## Engine Type\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Boxplot with facets\nggplot(data = ship_data_numeric, \n       aes(y = Numeric, x = Engine_Type)) +  # x maps to Engine_Type\n  geom_boxplot(outlier.shape = 16,  \n               outlier.colour = \"blue\",  \n               outlier.size = 1) +       \n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"pink\",          \n             size=3) +\n  labs(title = \"Box Plots of All Numeric Features by Engine Type\") +\n  facet_wrap(~Feature, scales = \"free_y\") +\n   theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  \n    strip.text = element_text(size = 8, lineheight = 1.1),\n    plot.margin = margin(10, 10, 10, 10),  \n    panel.spacing = unit(0.5, \"lines\")  \n   )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## Maintenance Status\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Boxplot with facets\nggplot(data = ship_data_numeric, \n       aes(y = Numeric, x = Maintenance_Status)) +  # x maps to Maintenance Status\n  geom_boxplot(outlier.shape = 16,  \n               outlier.colour = \"blue\",  \n               outlier.size = 1) +       \n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"pink\",          \n             size=3) +\n  labs(title = \"Box Plots of All Numeric Features by Maintenance Status\") +\n  facet_wrap(~Feature, scales = \"free_y\") +\n   theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  \n    strip.text = element_text(size = 8, lineheight = 1.1),\n    plot.margin = margin(10, 10, 10, 10),  \n    panel.spacing = unit(0.5, \"lines\")  \n   )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## Weather Conditions\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Boxplot with facets\nggplot(data = ship_data_numeric, \n       aes(y = Numeric, x = Weather_Condition)) +  # x maps to Weather Conditions\n  geom_boxplot(outlier.shape = 16,  \n               outlier.colour = \"blue\",  \n               outlier.size = 1) +       \n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"pink\",          \n             size=3) +\n  labs(title = \"Box Plots of All Numeric Features by Weather Conditions\") +\n  facet_wrap(~Feature, scales = \"free_y\") +\n   theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  \n    strip.text = element_text(size = 8, lineheight = 1.1),\n    plot.margin = margin(10, 10, 10, 10),  \n    panel.spacing = unit(0.5, \"lines\")  \n   )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n:::\n\n::: callout-important\n## Observations\n\n-   Looking at the box plots for all 5 categorical features, the influence of categorical features on the numerical features (i.e. revenue, cost, turnaround time etc.) is minimal.\n\n-   There are no significant trends identified from the plots that compares averages across the categorical features.\n\n-   Next, we will try to identify if there is any time trends on key numerical features (i.e. revenue, cost and fuel efficiency).\n:::\n\n### 4.4 Time Trend of Fuel Efficiency, Average Revenue and Average Cost\n\n::: panel-tabset\n## Fuel Efficiency\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Extract Year-Month\nship_data_Timetrend <- ship_data_clean %>%\n  mutate(Year_Month = as.Date(format(Date, \"%Y-%m-01\"))) %>%\n  group_by(Year_Month, Engine_Type) %>%\n  summarise(Average_Efficiency = mean(Efficiency_nm_per_kWh, na.rm = TRUE), .groups = \"drop\")\n\n# Average Efficiency over time\nplot_efficiency <-plot_ly(data = ship_data_Timetrend, \n        x = ~Year_Month, \n        y = ~Average_Efficiency, \n        color = ~Engine_Type, \n        type = 'scatter', \n        mode = 'lines+markers')\n\n# Apply layout for the Efficiency plot\nplot_efficiency <- plot_efficiency %>%\n layout(title = \"Fuel Efficiency Over Time\",\n         font = list(size = 16, family = \"Arial\"),\n         xaxis = list(title = \"Year-Month\", titlefont = list(size = 14, family = \"Arial\")),\n         yaxis = list(title = \"Efficiency (nm / kWh)\", titlefont = list(size = 14, family = \"Arial\")),\n         plot_bgcolor = \"#f9f9f9\",   # Background color\n         paper_bgcolor = \"#ffffff\",  # Paper background color\n         font = list(family = \"Arial\", size = 14, color = \"#333333\"),  # General font style\n         showlegend = TRUE, \n         legend = list(title = list(text = 'Engine Type')),\n         margin = list(l = 60, r = 60, t = 60, b = 60),  # Adjust margins\n         hovermode = \"closest\",   # Improve hover interaction\n         hoverlabel = list(bgcolor = \"white\", font = list(color = \"black\")))  # Hover label styling\nplot_efficiency\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-9d66f2382efc99f2c448\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-9d66f2382efc99f2c448\">{\"x\":{\"visdat\":{\"3114514f104\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"3114514f104\",\"attrs\":{\"3114514f104\":{\"x\":{},\"y\":{},\"mode\":\"lines+markers\",\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\"}},\"layout\":{\"margin\":{\"b\":60,\"l\":60,\"t\":60,\"r\":60},\"title\":\"Fuel Efficiency Over Time\",\"font\":{\"size\":16,\"family\":\"Arial\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Year-Month\",\"titlefont\":{\"size\":14,\"family\":\"Arial\"}},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Efficiency (nm / kWh)\",\"titlefont\":{\"size\":14,\"family\":\"Arial\"}},\"plot_bgcolor\":\"#f9f9f9\",\"paper_bgcolor\":\"#ffffff\",\"showlegend\":true,\"legend\":{\"title\":{\"text\":\"Engine Type\"}},\"hovermode\":\"closest\",\"hoverlabel\":{\"bgcolor\":\"white\",\"font\":{\"color\":\"black\"}}},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[\"2023-06-01\",\"2023-07-01\",\"2023-08-01\",\"2023-09-01\",\"2023-10-01\",\"2023-11-01\",\"2023-12-01\",\"2024-01-01\",\"2024-02-01\",\"2024-03-01\",\"2024-04-01\",\"2024-05-01\",\"2024-06-01\"],\"y\":[0.86190843561360231,0.86691150789340177,0.72162368581326597,0.77371264765294701,0.69089068376714691,0.84433203320376748,0.75540681632554663,0.84918639079247327,0.77401513740333261,0.7918616431800396,0.77387634135362049,0.75825237424183156,0.69903306198568282],\"mode\":\"lines+markers\",\"type\":\"scatter\",\"name\":\"Diesel\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"textfont\":{\"color\":\"rgba(102,194,165,1)\"},\"error_y\":{\"color\":\"rgba(102,194,165,1)\"},\"error_x\":{\"color\":\"rgba(102,194,165,1)\"},\"line\":{\"color\":\"rgba(102,194,165,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2023-06-01\",\"2023-07-01\",\"2023-08-01\",\"2023-09-01\",\"2023-10-01\",\"2023-11-01\",\"2023-12-01\",\"2024-01-01\",\"2024-02-01\",\"2024-03-01\",\"2024-04-01\",\"2024-05-01\",\"2024-06-01\"],\"y\":[0.84472091386649606,0.7859913323009442,0.7169403090350327,0.82017920059206428,0.79524170640927783,0.77213403229187039,0.76008533975354275,0.82710374991534819,0.77916924376018171,0.80430899774878617,0.74962141402216265,0.79668405735424108,0.7376632941465846],\"mode\":\"lines+markers\",\"type\":\"scatter\",\"name\":\"Heavy Fuel Oil (HFO)\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"textfont\":{\"color\":\"rgba(252,141,98,1)\"},\"error_y\":{\"color\":\"rgba(252,141,98,1)\"},\"error_x\":{\"color\":\"rgba(252,141,98,1)\"},\"line\":{\"color\":\"rgba(252,141,98,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2023-06-01\",\"2023-07-01\",\"2023-08-01\",\"2023-09-01\",\"2023-10-01\",\"2023-11-01\",\"2023-12-01\",\"2024-01-01\",\"2024-02-01\",\"2024-03-01\",\"2024-04-01\",\"2024-05-01\",\"2024-06-01\"],\"y\":[0.73911487536931486,0.90671926197438502,0.9096467432714479,0.72742038560290767,0.79718436776248636,0.83140250604451627,0.755718932109672,0.77827791920515244,0.75559303355372354,0.79097151890232864,0.86283713048844113,0.74479875910700322,0.86946659079676103],\"mode\":\"lines+markers\",\"type\":\"scatter\",\"name\":\"Steam Turbine\",\"marker\":{\"color\":\"rgba(231,138,195,1)\",\"line\":{\"color\":\"rgba(231,138,195,1)\"}},\"textfont\":{\"color\":\"rgba(231,138,195,1)\"},\"error_y\":{\"color\":\"rgba(231,138,195,1)\"},\"error_x\":{\"color\":\"rgba(231,138,195,1)\"},\"line\":{\"color\":\"rgba(231,138,195,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n::: callout-important\n## Observations\n\n-   Seasonal trend is observed, especially for **Long-haul** and **Short-haul** routes.\n\n    -   **Long-haul**: Average revenue peaked in the months of August and March\n\n    -   **Short-haul**: Average revenue peaked in the month of January\n\n-   However, this showed be analysed in tandem with the seasonal trend for operational cost and profit can be maximized only if operational costs are kept low.\n:::\n\n## Average Revenue\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Extract Year-Month\nship_data_Timetrend1 <- ship_data_clean %>%\n  mutate(Year_Month = as.Date(format(Date, \"%Y-%m-01\"))) %>%\n  group_by(Year_Month, Route_Type) %>%\n  summarise(Average_Revenue = mean(Revenue_per_Voyage_USD, na.rm = TRUE),\n            Average_Cost = mean(Operational_Cost_USD, na.rm = TRUE),.groups = \"drop\")\n\n# Average Revenue over time\nplot_revenue <- plot_ly(data = ship_data_Timetrend1, \n        x = ~Year_Month, \n        y = ~Average_Revenue, \n        color = ~Route_Type, \n        type = 'scatter', \n        mode = 'lines+markers')\n\n# Apply layout for the revenue plot\nplot_revenue <- plot_revenue %>%\n layout(title = \"Average Revenue Over Time\",\n         font = list(size = 16, family = \"Arial\"),\n         xaxis = list(title = \"Year-Month\", titlefont = list(size = 14, family = \"Arial\")),\n         yaxis = list(title = \"Average Revenue (USD)\", titlefont = list(size = 14, family = \"Arial\")),\n         plot_bgcolor = \"#f9f9f9\",   # Background color\n         paper_bgcolor = \"#ffffff\",  # Paper background color\n         font = list(family = \"Arial\", size = 14, color = \"#333333\"),  # General font style\n         showlegend = TRUE, \n         legend = list(title = list(text = 'Route Type')),\n         margin = list(l = 60, r = 60, t = 60, b = 60),  # Adjust margins\n         hovermode = \"closest\",   # Improve hover interaction\n         hoverlabel = list(bgcolor = \"white\", font = list(color = \"black\")))  # Hover label styling\nplot_revenue\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-554a71ffb66d1273dd61\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-554a71ffb66d1273dd61\">{\"x\":{\"visdat\":{\"31142055d35\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"31142055d35\",\"attrs\":{\"31142055d35\":{\"x\":{},\"y\":{},\"mode\":\"lines+markers\",\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\"}},\"layout\":{\"margin\":{\"b\":60,\"l\":60,\"t\":60,\"r\":60},\"title\":\"Average Revenue Over Time\",\"font\":{\"size\":16,\"family\":\"Arial\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Year-Month\",\"titlefont\":{\"size\":14,\"family\":\"Arial\"}},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Average Revenue (USD)\",\"titlefont\":{\"size\":14,\"family\":\"Arial\"}},\"plot_bgcolor\":\"#f9f9f9\",\"paper_bgcolor\":\"#ffffff\",\"showlegend\":true,\"legend\":{\"title\":{\"text\":\"Route Type\"}},\"hovermode\":\"closest\",\"hoverlabel\":{\"bgcolor\":\"white\",\"font\":{\"color\":\"black\"}}},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[\"2023-06-01\",\"2023-07-01\",\"2023-08-01\",\"2023-09-01\",\"2023-10-01\",\"2023-11-01\",\"2023-12-01\",\"2024-01-01\",\"2024-02-01\",\"2024-03-01\",\"2024-04-01\",\"2024-05-01\",\"2024-06-01\"],\"y\":[500341.50240725337,529813.98627732473,551180.80346791435,487709.08023825625,526670.09274884197,563050.21269649488,449156.74779072317,451630.26021446299,562323.19327980338,524116.05819719692,529754.88240853488,475133.69886556873,518473.09031365777],\"mode\":\"lines+markers\",\"type\":\"scatter\",\"name\":\"Coastal\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"textfont\":{\"color\":\"rgba(102,194,165,1)\"},\"error_y\":{\"color\":\"rgba(102,194,165,1)\"},\"error_x\":{\"color\":\"rgba(102,194,165,1)\"},\"line\":{\"color\":\"rgba(102,194,165,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2023-06-01\",\"2023-07-01\",\"2023-08-01\",\"2023-09-01\",\"2023-10-01\",\"2023-11-01\",\"2023-12-01\",\"2024-01-01\",\"2024-02-01\",\"2024-03-01\",\"2024-04-01\",\"2024-05-01\",\"2024-06-01\"],\"y\":[571469.98242387397,515717.12316033413,600898.54131652578,537886.86899115483,530519.75045082532,466876.68430595502,489764.39446066628,507847.22529182408,546557.51985517214,601311.0589358008,552966.25537653058,519459.82478000742,496754.98444136418],\"mode\":\"lines+markers\",\"type\":\"scatter\",\"name\":\"Long-haul\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"textfont\":{\"color\":\"rgba(252,141,98,1)\"},\"error_y\":{\"color\":\"rgba(252,141,98,1)\"},\"error_x\":{\"color\":\"rgba(252,141,98,1)\"},\"line\":{\"color\":\"rgba(252,141,98,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2023-06-01\",\"2023-07-01\",\"2023-08-01\",\"2023-09-01\",\"2023-10-01\",\"2023-11-01\",\"2023-12-01\",\"2024-01-01\",\"2024-02-01\",\"2024-03-01\",\"2024-04-01\",\"2024-05-01\",\"2024-06-01\"],\"y\":[515170.61881232512,491374.39465259598,508924.08223653591,530297.75211993954,540979.01851060463,553340.2992981514,524199.43813507532,576590.8018127156,541109.11826412601,531792.14400861866,486046.24832982442,533885.75894266053,539669.84731302189],\"mode\":\"lines+markers\",\"type\":\"scatter\",\"name\":\"Short-haul\",\"marker\":{\"color\":\"rgba(231,138,195,1)\",\"line\":{\"color\":\"rgba(231,138,195,1)\"}},\"textfont\":{\"color\":\"rgba(231,138,195,1)\"},\"error_y\":{\"color\":\"rgba(231,138,195,1)\"},\"error_x\":{\"color\":\"rgba(231,138,195,1)\"},\"line\":{\"color\":\"rgba(231,138,195,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2023-06-01\",\"2023-07-01\",\"2023-08-01\",\"2023-09-01\",\"2023-10-01\",\"2023-11-01\",\"2023-12-01\",\"2024-01-01\",\"2024-02-01\",\"2024-03-01\",\"2024-04-01\",\"2024-05-01\",\"2024-06-01\"],\"y\":[522980.06068138126,504522.52612041339,504704.20776135183,544997.14274293231,539034.35376585065,517990.89743450977,484007.98617356125,470814.64704776241,537387.77560779173,557820.66620770853,495087.06091318087,562518.16284415266,507204.90871166671],\"mode\":\"lines+markers\",\"type\":\"scatter\",\"name\":\"Transoceanic\",\"marker\":{\"color\":\"rgba(166,216,84,1)\",\"line\":{\"color\":\"rgba(166,216,84,1)\"}},\"textfont\":{\"color\":\"rgba(166,216,84,1)\"},\"error_y\":{\"color\":\"rgba(166,216,84,1)\"},\"error_x\":{\"color\":\"rgba(166,216,84,1)\"},\"line\":{\"color\":\"rgba(166,216,84,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n::: callout-important\n## Observations\n\n-   Seasonal trend is observed, especially for **Long-haul** and **Short-haul** routes:\n\n    -   **Long-haul**: Average revenue peaked in the months of August and March\n\n    -   **Short-haul**: Average revenue peaked in the month of January\n\n-   However, this showed be analysed in tandem with the seasonal trend for operational cost and profit can be maximized only if operational costs are kept low.\n:::\n\n## Average Cost\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Average Cost over time\nplot_cost <- plot_ly(data = ship_data_Timetrend1, \n        x = ~Year_Month, \n        y = ~Average_Cost, \n        color = ~Route_Type, \n        type = 'scatter', \n        mode = 'lines+markers')\n\n# Apply layout for the cost plot\nplot_cost <- plot_cost %>%\n layout(title = \"Average Cost Over Time\",\n         font = list(size = 16, family = \"Arial\"),\n         xaxis = list(title = \"Year-Month\", titlefont = list(size = 14, family = \"Arial\")),\n         yaxis = list(title = \"Average Cost (USD)\", titlefont = list(size = 14, family = \"Arial\")),\n         plot_bgcolor = \"#f9f9f9\",   # Background color\n         paper_bgcolor = \"#ffffff\",  # Paper background color\n         font = list(family = \"Arial\", size = 14, color = \"#333333\"),  # General font style\n         showlegend = TRUE, \n         legend = list(title = list(text = 'Route Type')),\n         margin = list(l = 60, r = 60, t = 60, b = 60),  # Adjust margins\n         hovermode = \"closest\",   # Improve hover interaction\n         hoverlabel = list(bgcolor = \"white\", font = list(color = \"black\")))  # Hover label styling\nplot_cost\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-522cf8d4a70352ab4b68\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-522cf8d4a70352ab4b68\">{\"x\":{\"visdat\":{\"31145a97797f\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"31145a97797f\",\"attrs\":{\"31145a97797f\":{\"x\":{},\"y\":{},\"mode\":\"lines+markers\",\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\"}},\"layout\":{\"margin\":{\"b\":60,\"l\":60,\"t\":60,\"r\":60},\"title\":\"Average Cost Over Time\",\"font\":{\"size\":16,\"family\":\"Arial\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Year-Month\",\"titlefont\":{\"size\":14,\"family\":\"Arial\"}},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Average Cost (USD)\",\"titlefont\":{\"size\":14,\"family\":\"Arial\"}},\"plot_bgcolor\":\"#f9f9f9\",\"paper_bgcolor\":\"#ffffff\",\"showlegend\":true,\"legend\":{\"title\":{\"text\":\"Route Type\"}},\"hovermode\":\"closest\",\"hoverlabel\":{\"bgcolor\":\"white\",\"font\":{\"color\":\"black\"}}},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[\"2023-06-01\",\"2023-07-01\",\"2023-08-01\",\"2023-09-01\",\"2023-10-01\",\"2023-11-01\",\"2023-12-01\",\"2024-01-01\",\"2024-02-01\",\"2024-03-01\",\"2024-04-01\",\"2024-05-01\",\"2024-06-01\"],\"y\":[252303.44111546077,237028.41518156705,279343.98141142842,226029.76448662166,264814.70177423506,297443.4124112904,270217.11500683863,259369.35659184761,256381.50827276311,227940.29712594717,219325.50830375662,240135.72195422821,248694.37471000163],\"mode\":\"lines+markers\",\"type\":\"scatter\",\"name\":\"Coastal\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"textfont\":{\"color\":\"rgba(102,194,165,1)\"},\"error_y\":{\"color\":\"rgba(102,194,165,1)\"},\"error_x\":{\"color\":\"rgba(102,194,165,1)\"},\"line\":{\"color\":\"rgba(102,194,165,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2023-06-01\",\"2023-07-01\",\"2023-08-01\",\"2023-09-01\",\"2023-10-01\",\"2023-11-01\",\"2023-12-01\",\"2024-01-01\",\"2024-02-01\",\"2024-03-01\",\"2024-04-01\",\"2024-05-01\",\"2024-06-01\"],\"y\":[251904.12988513781,232380.9925926743,243742.94090164787,238016.79700361853,302644.92938990833,262736.2273333242,254212.9167649452,273858.65627323493,268247.97340998193,290374.14556981548,251278.60720779543,241382.33621857082,229162.67151904621],\"mode\":\"lines+markers\",\"type\":\"scatter\",\"name\":\"Long-haul\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"textfont\":{\"color\":\"rgba(252,141,98,1)\"},\"error_y\":{\"color\":\"rgba(252,141,98,1)\"},\"error_x\":{\"color\":\"rgba(252,141,98,1)\"},\"line\":{\"color\":\"rgba(252,141,98,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2023-06-01\",\"2023-07-01\",\"2023-08-01\",\"2023-09-01\",\"2023-10-01\",\"2023-11-01\",\"2023-12-01\",\"2024-01-01\",\"2024-02-01\",\"2024-03-01\",\"2024-04-01\",\"2024-05-01\",\"2024-06-01\"],\"y\":[245825.22178885216,288586.6054356955,272611.44643127068,229472.55350712521,290745.34343468107,257927.75421865855,249421.09232438394,259011.6999977307,293308.0051428263,212562.40303628481,258289.0202736402,282607.65833836212,251470.43109731405],\"mode\":\"lines+markers\",\"type\":\"scatter\",\"name\":\"Short-haul\",\"marker\":{\"color\":\"rgba(231,138,195,1)\",\"line\":{\"color\":\"rgba(231,138,195,1)\"}},\"textfont\":{\"color\":\"rgba(231,138,195,1)\"},\"error_y\":{\"color\":\"rgba(231,138,195,1)\"},\"error_x\":{\"color\":\"rgba(231,138,195,1)\"},\"line\":{\"color\":\"rgba(231,138,195,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2023-06-01\",\"2023-07-01\",\"2023-08-01\",\"2023-09-01\",\"2023-10-01\",\"2023-11-01\",\"2023-12-01\",\"2024-01-01\",\"2024-02-01\",\"2024-03-01\",\"2024-04-01\",\"2024-05-01\",\"2024-06-01\"],\"y\":[211950.47057247657,262451.07309102768,261115.99507307826,279921.15257590148,289075.44576092012,260983.34215902886,252689.42281022566,285987.34404346591,230076.17032591198,301236.05224322213,291107.16111417726,199441.40816033568,265186.26705228403],\"mode\":\"lines+markers\",\"type\":\"scatter\",\"name\":\"Transoceanic\",\"marker\":{\"color\":\"rgba(166,216,84,1)\",\"line\":{\"color\":\"rgba(166,216,84,1)\"}},\"textfont\":{\"color\":\"rgba(166,216,84,1)\"},\"error_y\":{\"color\":\"rgba(166,216,84,1)\"},\"error_x\":{\"color\":\"rgba(166,216,84,1)\"},\"line\":{\"color\":\"rgba(166,216,84,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n::: callout-important\n## Observations\n\n-   Seasonal trend is also observed, but it differs slightly from the trend in revenue:\n\n    -   **Long-haul**: Average cost peaked in the months of **October** and March. Cost in August is kept relatively low, even though revenues were high, possibly due to other factors like use of more fuel efficient ships to keep cost down.\n\n    -   **Short-haul & Transoceanic**: Average cost generally higher among the 4 route types and have erratic trends. Not recommended as they do not maximize profits.\n:::\n:::\n\n### 4.5 K-Means\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfviz_nbclust(scaled_cols, kmeans, method = \"wss\") + \n  ggtitle(\"Elbow Method for Choosing k\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: did not converge in 10 iterations\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assuming you choose the optimal k (let's say k = 3)\noptimal_k <- 2\nkmeans_result <- kmeans(scaled_cols, centers = optimal_k, nstart = 25)\n\nfviz_cluster(kmeans_result, data = scaled_cols, \n             ellipse.type = \"norm\", geom = \"point\", \n             main = paste(\"K-Means Clustering (k =\", optimal_k, \")\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate silhouette score\nsilhouette_scores <- silhouette(kmeans_result$cluster, dist(scaled_cols))\navg_silhouette_score <- mean(silhouette_scores[, 3])\n\n# Print the silhouette object\nprint(avg_silhouette_score)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.06443715\n```\n\n\n:::\n:::\n\n\n## 5 Summary & Conclusion\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}